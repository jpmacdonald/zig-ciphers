const std = @import("std");

const cbc = @import("cbc.zig");
const ctr = @import("ctr.zig");
const ecb = @import("ecb.zig");

pub const Mode = enum {
    CBC,
    CTR,
    ECB,
};

pub const KeySize = enum {
    Bits128,
    Bits192,
    Bits256,
};

pub fn encrypt(plaintext: []const u8, key: []const u8, keySize: KeySize, mode: Mode, iv: ?[16]u8) ![]u8 {
    if (mode != .ECB and iv == null) return error.MissingIV;
    const cipher = try aesEncrypt(plaintext, key, keySize);

    switch (mode) {
        .CBC => return cbc.encrypt(cipher, iv.?),
        .CTR => return ctr.encrypt(cipher, iv.?),
        .ECB => return ecb.encrypt(cipher),
    }
}

pub fn decrypt(ciphertext: []const u8, key: []const u8, keySize: KeySize, mode: Mode, iv: ?[16]u8) ![]u8 {
    if (mode != .ECB and iv == null) return error.MissingIV;
    const cipher = try aesDecrypt(ciphertext, key, keySize);

    switch (mode) {
        .CBC => return cbc.decrypt(cipher, iv.?),
        .CTR => return ctr.decrypt(cipher, iv.?),
        .ECB => return ecb.decrypt(cipher),
    }
}

fn aesEncrypt(plaintext: []const u8, key: []const u8, key_size: KeySize) ![]u8 {
    const round_keys = try expandKey(key, key_size);
    defer std.heap.page_allocator.free(round_keys);

    var ciphertext = try std.ArrayList(u8).initCapacity(std.heap.page_allocator, plaintext.len);
    errdefer ciphertext.deinit();

    var i: usize = 0;
    while (i < plaintext.len) : (i += 16) {
        var block: [16]u8 = undefined;
        std.mem.copy(u8, &block, plaintext[i..][0..16]);
        
        addRoundKey(&block, round_keys[0..4]);
        
        var round: usize = 1;
        while (round < round_keys.len / 4 - 1) : (round += 1) {
            subBytes(&block);
            shiftRows(&block);
            mixColumns(&block);
            addRoundKey(&block, round_keys[round * 4 .. round * 4 + 4]);
        }
        
        subBytes(&block);
        shiftRows(&block);
        addRoundKey(&block, round_keys[round_keys.len - 4 ..]);
        
        try ciphertext.appendSlice(&block);
    }

    return ciphertext.toOwnedSlice();
}

fn aesDecrypt(ciphertext: []const u8, key: []const u8, key_size: KeySize) ![]u8 {
    const round_keys = try expandKey(key, key_size);
    defer std.heap.page_allocator.free(round_keys);

    var plaintext = try std.ArrayList(u8).initCapacity(std.heap.page_allocator, ciphertext.len);
    errdefer plaintext.deinit();

    var i: usize = 0;
    while (i < ciphertext.len) : (i += 16) {
        var block: [16]u8 = undefined;
        std.mem.copy(u8, &block, ciphertext[i..][0..16]);
        
        addRoundKey(&block, round_keys[round_keys.len - 4 ..]);
        
        var round: usize = round_keys.len / 4 - 2;
        while (round > 0) : (round -= 1) {
            invShiftRows(&block);
            invSubBytes(&block);
            addRoundKey(&block, round_keys[round * 4 .. round * 4 + 4]);
            invMixColumns(&block);
        }
        
        invShiftRows(&block);
        invSubBytes(&block);
        addRoundKey(&block, round_keys[0..4]);
        
        try plaintext.appendSlice(&block);
    }

    return plaintext.toOwnedSlice();
}



fn expandKey(key: []const u8, key_size: KeySize) ![]u32 {
    const nk = switch (key_size) {
        .Bits128 => 4,
        .Bits192 => 6,
        .Bits256 => 8,
        else => return error.InvalidKeySize,
    };
    const nr = switch (key_size) {
        .Bits128 => 10,
        .Bits192 => 12,
        .Bits256 => 14,
        else => return error.InvalidKeySize,
    };

    var round_keys = try std.ArrayList(u32).initCapacity(std.heap.page_allocator, 4 * (nr + 1));
    errdefer round_keys.deinit();

    var i: usize = 0;
    while (i < nk) : (i += 1) {
        const word = std.mem.readIntSliceLittle(u32, key[i * 4 .. i * 4 + 4]);
        try round_keys.append(word);
    }

    i = nk;
    while (i < 4 * (nr + 1)) : (i += 1) {
        var temp = round_keys.items[i - 1];
        if (i % nk == 0) {
            temp = subWord(rotWord(temp)) ^ rcon[i / nk - 1];
        } else if (nk > 6 and i % nk == 4) {
            temp = subWord(temp);
        }
        round_keys.items[i] = round_keys.items[i - nk] ^ temp;
    }

    return round_keys.toOwnedSlice();
}


fn subWord(word: u32) u32 {
    var result: u32 = 0;
    for (0..4) |i| {
        const byte = @as(u8, word >> (8 * (3 - i)));
        result |= @as(u32, sbox[byte]) << (8 * i);
    }
    return result;
}

fn rotWord(word: u32) u32 {
    return (word << 8) | (word >> 24);
}

fn subBytes(state: *[16]u8) void {
    for (state) |*byte| {
        byte.* = sbox[byte.*];
    }
}

fn invSubBytes(state: *[16]u8) void {
    for (state) |*byte| {
        byte.* = invSbox[byte.*];
    }
}

fn addRoundKey(state: *[16]u8, roundKey: []const u32) void {
    for (state, 0..) |*byte, i| {
        const index = i / 4;
        byte.* ^= @intCast(roundKey[index] >> (8 * (i % 4)));
    }
}

fn shiftRows(state: *[16]u8) void {
    // Shift the second row
    var temp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = temp;

    // Shift the third row
    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;

    // Shift the fourth row
    temp = state[3];
    state[3] = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = temp;
}

fn invShiftRows(state: *[16]u8) void {
    // Shift the second row
    var temp = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = temp;

    // Shift the third row
    temp = state[10];
    state[10] = state[2];
    state[2] = temp;
    temp = state[14];
    state[14] = state[6];
    state[6] = temp;

    // Shift the fourth row
    temp = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = state[3];
    state[3] = temp;
}

fn mixColumns(state: *[16]u8) void {
    var temp: [16]u8 = undefined;
    std.mem.copy(u8, &temp, state);

    for (state, 0..) |_, i| {
        state[i] = gmul(temp[i], 0x02) ^ gmul(temp[(i + 5) % 16], 0x03) ^ 
                   temp[(i + 10) % 16] ^ temp[(i + 15) % 16];
    }
}

fn invMixColumns(state: *[16]u8) void {
    var temp: [16]u8 = undefined;
    std.mem.copy(u8, &temp, state);

    for (state, 0..) |_, i| {
        state[i] = gmul(temp[i], 0x0e) ^ gmul(temp[(i + 5) % 16], 0x09) ^
                   gmul(temp[(i + 10) % 16], 0x0d) ^ gmul(temp[(i + 15) % 16], 0x0b);
    }
}

// Galois Field Multiplication
fn gmul(a: u8, b: u8) u8 {
    var product: u8 = 0;
    var factor_a: u8 = a;
    var factor_b: u8 = b;

    for (0..8) |_| {
        if ((factor_b & 1) != 0) {
            product ^= factor_a;
        }

        const high_bit_set = (factor_a & 0x80) != 0;
        factor_a <<= 1;
        if (high_bit_set) {
            factor_a ^= 0x1b;
        }

        factor_b >>= 1;
    }

    return product;
}




// https://en.wikipedia.org/wiki/Rijndael_S-box
const sbox = [256]u8{
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
};

const invSbox = [256]u8{
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
};


// Rijndael Rcon
const rcon = [10]u32{
    0x01000000, 0x02000000, 0x04000000, 0x08000000,
    0x10000000, 0x20000000, 0x40000000, 0x80000000,
    0x1b000000, 0x36000000,
};